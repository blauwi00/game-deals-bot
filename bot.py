import asyncio
import logging
import random
import aiohttp
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.types import ParseMode

# üîπ –ó–∞–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞
TOKEN = "7934109371:AAGZnZbBmLaw2Esap1vAEcI7Pd0YaJ6xQgc"
TELEGRAM_CHANNEL_ID = "@gamehunttm"
STEAM_API_URL = "https://store.steampowered.com/api/featuredcategories/"
POSTER_URL = "https://i.imgur.com/AhzG3kO.jpeg"  # –¢–≤–æ–π –ø–æ—Å—Ç–µ—Ä

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(bot)

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–∫–∏–¥–æ–∫ –∏–∑ Steam
async def fetch_discounts():
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(STEAM_API_URL) as response:
                if response.status == 200:
                    data = await response.json()
                    games = []

                    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–∫–∏–¥–æ–∫
                    for category in data.get("specials", {}).get("items", []):
                        if category.get("discounted", False):
                            game = {
                                "name": category["name"],
                                "original_price": category["original_price"] / 100 if category.get("original_price") else None,
                                "final_price": category["final_price"] / 100 if category.get("final_price") else None,
                                "discount": category["discount_percent"],
                                "link": f"https://store.steampowered.com/app/{category['id']}",
                                "image": category.get("header_image", ""),
                            }
                            games.append(game)

                    return games
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ Steam API: –ö–æ–¥ {response.status}")
                    return []
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []

# üîπ –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∫–∏–¥–∫–∏
async def get_random_discounts():
    all_discounts = await fetch_discounts()
    if not all_discounts:
        return None
    
    random.shuffle(all_discounts)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    return all_discounts[:5]  # –ë–µ—Ä—ë–º 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∫–∏–¥–æ–∫

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞
async def send_discount_post():
    discounts = await get_random_discounts()
    
    if not discounts:
        await bot.send_message(TELEGRAM_CHANNEL_ID, "üö´ –ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∫–∏–¥–æ–∫.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    message = "<b>üî• –ì–æ—Ä—è—â–∏–µ —Å–∫–∏–¥–∫–∏ –≤ Steam!</b>\n\n"
    for deal in discounts:
        message += (
            f"üéÆ <b>{deal['name']}</b>\n"
            f"üí∞ <s>{deal['original_price']:.2f} USD</s> ‚û°Ô∏è {deal['final_price']:.2f} USD\n"
            f"üî• –°–∫–∏–¥–∫–∞: {deal['discount']}%\n"
            f"üîó <a href='{deal['link']}'>–ö—É–ø–∏—Ç—å –≤ Steam</a>\n\n"
        )

    message += "üìå –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ —Å–∫–∏–¥–∫–∏!"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π-–ø–æ—Å—Ç–µ—Ä–æ–º
    await bot.send_photo(TELEGRAM_CHANNEL_ID, POSTER_URL, caption=message)

# üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (—Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç)
async def schedule_posts():
    while True:
        await send_discount_post()
        await asyncio.sleep(1800)  # 1800 —Å–µ–∫—É–Ω–¥ = 30 –º–∏–Ω—É—Ç

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    asyncio.create_task(schedule_posts())
    await asyncio.sleep(9999999)  # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã–º

asyncio.run(main())
